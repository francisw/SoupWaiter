{% extends 'admin/vacation-soup.twig' %}
{% block content %}
    <input type="hidden" id="nextMOTD" class="persist" name="SoupWaiter.nextMOTD" value="{{ soup.nextMOTD }}">
    <input type="hidden" id="next_topic" class="persist" name="SoupWaiter.next_topic" value="{{ soup.next_topic }}">

    <script>
    // Global so they can be accessed when needed (including in pixabay-images)
    var vs_topics = [];
    var k_topics = []; // Kitchen retrieved topics
    var k_tags = []; // Kitchen retrieved tags
    var vs_title;
    var vs_query;
    var motdClicked = false;
    var checkedTag='';

    var getMOTD = function() {
        jQuery('#motd').addClass("checking");

        var offset = jQuery('#nextMOTD');
        jQuery.ajax({
            type: "get",
            dataType: "json",
            context: this,
            url: '{{ soup.kitchen_host~'/'~soup.kitchen_api~'/motd/' }}',
            data: {
                per_page: 1,
                offset: offset.val()
            }
        }).statusCode({
            400: function(){ // This means we have gone past the end of the list
                if (offset.val() !== 0){ // reset back to the start
                    offset.val(0).change();
                    return getMOTD();
                }
            }
        }).done(function (response) {
            var motd = jQuery("#motd");
            if (response.error) {
                html = '<p>Error: Waiter failed to contact Kitchen</p>' + response.error.message;
            } else {
                if (response.length) {
                    offset.val(parseInt(offset.val()) + 1).change();
                    var title = '<h1 id="title">'+response[0].title.rendered+'</h1>';
                    motd.html(title+response[0].content.rendered);
                } else { // Must have gone past the end
                    if (offset.val() !== 0){ // reset back to the start
                        offset.val(0).change();
                        return getMOTD();
                    }
                }
            }
        }).always(function (response) {
            jQuery("#motd").removeClass("checking");
        });
    }

    const topicsPerPage = 5;
    var topicPageAdvanced = false;
    var binEndTopics = []; // temporary storage of last few topics when cycling back to start
    var getTrendingTopics = function(){
        jQuery('#trending-topics').addClass("checking").html('');
        jQuery('#topic-refresh').addClass('active');
        var offset = jQuery('#next_topic');
        jQuery.ajax({
            type: "get",
            dataType: "json",
            context: this,
            url: '{{ soup.kitchen_host~'/'~soup.kitchen_api~'/topic/' }}',
            data: {
                offset: offset.val(),
                per_page: topicsPerPage - binEndTopics.length,
                exclude: {{ recent_topics|json_encode }}
            }
        }).statusCode({
            400: function(){ // Bad Params: normally means we have gone past the end of the list
                var offset = jQuery('#next_topic');
                if (offset.val() !== 0){ // reset back to the start, but only once
                    offset.val(0);
                    return getTrendingTopics();
                }
            }
        }).fail(function(jqXHR,status,error) {
            alert('Error: Waiter failed to contact Kitchen\n'+error);
        }).done(function(response) {
            var html='';
            if (response.error) {
                html = '<p>Error: Waiter failed to contact Kitchen</p>'+response.error.message;
            } else {
                // Handle paging of topics from Kitchen
                if (0 === response.length){ // Past the last page of topics
                    if (parseInt(offset.val()) !== 0){ // reset back to the start
                        offset.val(0);
                        return getTrendingTopics();
                    } else return null;  // if offset was 0 and no recs returned.
                } else {
                    // Only update pageAdvanced marker if we have a full page
                    if (0===binEndTopics.length){
                        topicPageAdvanced = parseInt(offset.val());
                    }
                    // If less than a full page, and not first page
                    if (topicsPerPage !== response.length && 0!==parseInt(offset.val())){ // less than a full page
                        offset.val(0);
                        binEndTopics = response; // These will be added to the next lot
                        return getTrendingTopics();
                    }
                    var next_topic = parseInt(offset.val())+(topicsPerPage - binEndTopics.length);
                    offset.val(next_topic).change();
                    if (binEndTopics.length){
                        response = binEndTopics.concat(response);
                        binEndTopics = [];
                    }
                }
                k_topics=[];
                k_tags=[];
                response.forEach(function(topic){ // Create k_topics and k_tags (deduped tag_id list)
                    k_topics.push(topic);
                    topic.tags.forEach(function(tag){
                        if(jQuery.inArray(tag, k_tags) === -1) k_tags.push(tag);
                    });
                });
                jQuery.ajax({
                    type: "get",
                    dataType: "json",
                    context: this,
                    url: '{{ soup.kitchen_host~'/'~soup.kitchen_api~'/tags/' }}',
                    data: {
                        include: k_tags.sort(),
                        per_page: (k_tags.length)?k_tags.length:1
                    }
                }).always(function(jqXHR,status,error) {
                    jQuery("#trending-topics").removeClass("checking");
                    jQuery('#topic-refresh').removeClass('active');
                }).fail(function(jqXHR,status,error) {
                    alert('Error: Waiter failed to contact Kitchen\n'+error);
                }).done(function(response) {
                    var html='';
                    k_tags = [];
                    if (response.error) {
                        html = '<p>Error: Waiter failed to contact Kitchen</p>'+response.error.message;
                    } else {
                        response.forEach(function(tag){
                            k_tags[tag.id] = tag;
                        });
                    }
                    var topicText = "I'll write my own";
                    k_topics.push({"id":0,"tags":[],"title":{"rendered":topicText,"raw":topicText}});
                    k_topics.forEach(function(topic,i){
                        var location='';
                        var elem = document.createElement('textarea');
                        elem.innerHTML = topic.title.rendered;
                        topic.title.raw = elem.value;
                        $input = '<input type="radio" name="trending_topics" id="topic_'+i+'" value="'+i+'" onchange="chooseTopic(jQuery(this).val())"/>';
                        if (topic.id !== 0){
                            location = ' {{ soup.destination.rendered }}';
                        }
                        $label = '<label for="topic_'+i+'">'+topic.title.rendered+location+'</label>';
                        jQuery("#trending-topics").append('<li>'+$input+$label+'</li>');
                    });


                    var randomTopic = Math.floor((Math.random() * (k_topics.length-1)));
                    jQuery('INPUT[name="trending_topics"]')[randomTopic].checked = true;
                    chooseTopic(randomTopic);
                });
            }
        });
    }

    var inputFromTag = function (tag, i) {
        var label = '<label for="tag_' + i + '">' + tag + '</label>';
        var input = '<input type="checkbox" name="tags[]" id="tag_' + i +
                    '" value="' + tag +
                    '" title="' + tag + '" '+
                    checkedTag + '/>';
        return '<li class="checklist-item">' + label + input + '</li>';
    }
    var inputForNewTag = function () {
        return '<li class="checklist-item"><input type="text" id="new-tag" onchange="newTag(this)" placeholder="New Tag"></li>';
    }

    var chooseTopic = function(topicId) {
        var topic = k_topics[topicId];
        vs_query = [];

        if (topic.id) {
            // global the selected tags for pixabay and the subject
            vs_query = topic.tags.map(function (tag) {
                return k_tags[tag].name
            });
            vs_title = topic.title.raw + ' ' + '{{ soup.destination.rendered }}';
            jQuery('#post_title').prop('autofocus',false).val(vs_title);
            jQuery('INPUT[name="topic"]').val(topic.id);
        } else {
            // They'll write their own
            jQuery('#post_title').prop('autofocus',true).focus().val("");
        }
        showTags();
    }
    var newTags = [];
    var showTags = function(){
        var i = 0;
        // Build the complete tag list
        permTags = newTags.concat({{ permTags|json_encode|raw }});

        var html = '';
        vs_query.forEach(function (tag) {
            html += inputFromTag(tag, ++i);
        });

        checkedTag = 'checked';
        permTags.forEach(function (tag) {
            html += inputFromTag(tag, ++i);
        });
        checkedTag = '';
        html += inputForNewTag();
        jQuery('.tags-container').html(html);
        // Prevent spaces in tags
        jQuery('#new-tag').on({
            keydown: function(e) {
                if (e.which === 32)
                    return false;
            },
            change: function() {
                this.value = this.value.replace(/\s/g, "");
            }
        });
    };

    var newTag = function(elem){
        newTags.push(jQuery(elem).val());
        showTags();
    }

    var postDateElem,postStatusElem;
    var setPostDateAndStatus = function(){
        var postDate, postStatus;
        var when = jQuery('#when').val();
        postDateElem = jQuery('#post_date');
        postStatusElem = jQuery('#post_status');
        var dayInMsec = 86400000; // 24 * 60 * 60 * 1000 = 1 day in msec
        var futureDays = 1; // Default to adding one day, for 'tomorrow'

        switch(when){
            case 'days':
                futureDays = jQuery('#days').val();
                // Fall-through to tomorrow code
            case 'tomorrow':
                postStatusElem.val('future');
                postDate = new Date(new Date().getTime() + (futureDays * dayInMsec));
                postDateElem.val(postDate.toISOString().split('T')[0]);
                break;
            case 'on':
                postDateElem.val(jQuery('#datepicker').val());
                postStatusElem.val('future'); // postDateElem already set
                break;
            case '': // Now!
            default:
                postDateElem.val('');
                postStatusElem.val('publish');
                break;
        }

    };

    jQuery(function(){
        getMOTD();
        getTrendingTopics();
        jQuery( ".datepicker" ).datepicker({
            dateFormat : "yyyy-mm-dd"
        });
        jQuery('#motd').click(function(){
            if (jQuery('#featured_image').val()) { // if they clicked and we have an FI
                motdClicked = true; // Then tell pixabay we are replacing, not adding
                jQuery("#-add_media").click();
            }
        });
        jQuery('#alter-destination').change(function(){
            if (false!==topicPageAdvanced){
                // Then we need to rewind the topics so they stay as they are now
                ajaxCall = {
                    type: "post",
                    async: false,   // Make sure it completes before we reload this page
                    dataType: "json",
                    context: this,
                    url: ajaxurl,
                    data: {
                        action: "soup",
                        tab: "{{ tab }}",
                        _vs_nonce: jQuery('INPUT[name="_vs_nonce"]').val(),
                        name: jQuery('#next_topic').attr("name"),
                        value: topicPageAdvanced,
                        id: '#next_topic'
                    }
                };

                jQuery.ajax(ajaxCall) // Not Asynchronous so the window.location waits for completion
                    .fail(function(jqXHR,status,error) {
                    console.log('fail (vacation-soup) '+status+' '+error);
                    alert('Error: Could rewind topics\n'+status);
                })
                window.location.search += '&destination_id='+this.options[this.selectedIndex].value
            }
        });
    });


</script>

{% embed 'admin/post-form.twig' %}{% block form_content %}
<div class="vs-content tab-create row">
    <div class="col-xs-12 col-sm-6 col-lg-8">
        <div class="vs-panel row">
            <div id="title" class="col-sm-12">
                <h1>Create Post
                    <select title="Alternative destinations" id="alter-destination">
                        {% for destination in soup.destinations %}
                            <option value="{{ destination.id }}" {{ (destination.id == soup.current_destination)?'selected':'' }}>{{ destination.rendered }}</option>
                        {% endfor %}
                    </select>
                </h1>
            </div>
            <div class="col-xl-8 col-lg-6 col-md-12 col-sm-12">
                <p>Select one of the trending post subjects on the right, or create your own. Ideally post 3 <strong>trending searches</strong> a week to feed the search engines optimally.</p>
                <div class="vs-panel row">
                    <div id="motd" class="col-sm-12">
                        <h1>Message of the day</h1>
                    </div>
                </div>
            </div>
            <div class="col-xl-4 col-lg-6 col-md-12 col-sm-12 float-right">
                <h2>Trending searches <i id="topic-refresh" class="fa fa-refresh" onclick="getTrendingTopics()"></i></h2>
                <ul id="trending-topics" class="hoverable">
                </ul>
            </div>
            <div class="col-sm-12">
                <div class="subject">
                    <input type="text" title="Subject" name="post_title" id="post_title" value=""/>
                </div>
            </div>
            <div class="col-sm-12">
                <div id="wp-content-editor-container">
                    {{ fn('wp_editor','','post_content') }}
                </div>
            </div>
            {#- Layout the tags in a centered column (lg) or on its own (sm) -#}
            <div id="tagger" class="col-lg-8 col-sm-12">
                <h2>Tags</h2>
                <ul class="tags-container checklist hoverable">
                    <li class="checklist-item">{# The contents are replaced by javascript #}
                        There are no automatic tags for this topic.
                    </li>
                </ul>
            </div>
            <div id="scheduler" class="col-lg-4 col-sm-12">
                <h2><label for="when">Schedule</label></h2>
                <input type="submit" name="post_status" id="save-post" value="draft" class="button button-secondary button-large">
                <input type="submit" name="post_status" id="publish" class="button button-primary button-large" value="publish">
                <div class="vs-field">
                    <select id="when" onchange="
                           setPostDateAndStatus();
                           jQuery('.vs-field.hideable').addClass('hidden');
                           jQuery('[autofocus]').removeProp('autofocus');
                           jQuery('.vs-field.vs-'+this.options[this.selectedIndex].value).removeClass('hidden'); // e.g. unhide .vs-days input
                           jQuery('.vs-field.vs-'+this.options[this.selectedIndex].value+' INPUT').prop('autofocus',true).focus();
                        ">
                        <option value="" selected>Now</option>
                        <option value="tomorrow">Tomorrow</option>
                        <option value="days">Wait a number of days</option>
                        <option value="date">Select date</option>
                    </select>
                </div>
                <div class="vs-field hideable hidden vs-days">
                    <label for="days">Wait</label>
                    <input type="number" id="days" value="2" onchange="setPostDateAndStatus()"/> days before posting
                </div>
                <div class="vs-field hideable hidden vs-date">
                    <label for="datepicker">Post this on: </label>
                    <input type="text" class="datepicker" id="datepicker" onchange="setPostDateAndStatus()"/>
                </div>
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-sm-6 col-lg-4">
        <div class="vs-panel row">
            <div id="post-lister" class="col-sm-12">
                <h1>Your recent posts</h1>
                <ul>
                    {% for post in posts %}
                        {% include "tease-post.twig" %}
                    {% else %}
                        <li>No posts available</li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>
</div>
{% endblock form_content %}{% endembed %}
{% endblock content %}